

DEFINITIONS::
type 		:= card | board | dice			always on line 1
playerAmount	:= x | [x,y] | {x,y,z,...}		always on line 2

Deck = {...}x{...}+{...}
CardPiles = {X,Y,...}
PlayerPiles = {X,...}

playerAmount = [a,b]
startingCards = a

turnOrder = (A<.A>)^C<.B*>^D
turnActions = Act, +, ., *, ^n

initial = EXP;*


KEYWORDS::
EXP;

shuffle(X)		:= Shuffles Card Pile X
move(C to X)		:= moves Card C to Cardpile X
top(X) -> Card		:= returns the top Card of Cardpile X
top_x(X,n) -> Card[]	:= returns the top n Cards of Cardpile X
size(X)	-> int		:= returns the size of Cardpile X
multiple(X,a,b) -> Card[] := returns the cards with a <= index <= b from Cardpile X
victory(U)		:= ends the game with victory for Player U
defeat(U)		:= eliminates Player U from the game

CardPile[X]		:= Represents the Card Pile X
PlayerPile[P][X]

Player[P]

if { EXP } do { EXP } <elif { EXP }>* <else { EXP }>	:= explicit conditional
has X from Y:
EXP: { EXP* }		:= definitions for the expressions After


VARIABLE TYPES::
X,Y,Z = Pile
C,D = Card
P = Player, i:current, i+-n:nth-next player, r:random player, ro:random other player, {P..P} multiple players, t:target player, to:target other player